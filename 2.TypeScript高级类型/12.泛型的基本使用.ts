/** 
 * 泛型：在保证安全的前提下，让函数与多种类型一起工作，从而实现复用，常用于：函数，接口，class中
 * 应用场景：在不确定函数参数类型时，根据传入的参数类型，返回相同类型的返回值
 */

/**
 * 语法：在函数名后面添加尖括号<>，尖括号中添加的类型变量，比如下面示例中的Type
 * 类型变量Type,是一种特殊的类型变量，它处理类型而不是值
 * Type相当于一个容器，能捕获参数的类型（具体什么类型有调用时传入的参数指定）
 * 由于Type时类型，因此可以将其作为函数参数和返回值的类型，表示参数和返回值的类型相同
 * 变量类型Type,可以是任意合法的变量名
 */
function returnInput<Type>(value: Type): Type {
    return value
}
//泛型函数的调用
let num: number = returnInput<number>(100)
let str: string = returnInput<string>('100')
/**
 * 调用时：在函数名称后面见括号内指定具体的类型
 * 当具体的类型传入后，被类型变量Type捕获到
 * 所以函数的参数和返回值就是相同的Type捕获到的类型
 */
let retu = returnInput(10)
/**
 * 简化调用：省略<类型>来简化泛型函数的调用
 * TS内部会采用一种类型参数推断的机制，根据实际的参数自动推断出变量Type的类型
 * 但是，当编译器无法推断类型或者推断的类型不准确时，就需要显式得传入类型参数
 */